{"version":3,"sources":["App.module.css","Tab/Tab.module.css","SpotifyApiService.js","Tab/Tab.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","redirectURI","window","location","protocol","host","SpotifyApiService","accessToken","this","getCurrentAccessToken","axios","defaults","headers","common","Authorization","getNewAccessToken","hashFragment","document","hash","split","find","s","match","url","encodeURIComponent","page","get","then","response","data","items","catch","map","item","track","Promise","resolve","Tab","title","name","artist","artists","imageURL","album","images","ultimateGuitarQuery","ultimateGuitarUrl","anchorClass","classnames","classes","href","target","className","alt","src","SPOTIFY_RECENT","SPOTIFY_TOP","App","props","loadNextPage","state","spotifyApiService","mode","topTracks","recentTracks","setState","dataExhausted","length","changeMode","oldProps","oldState","value","onChange","e","TabList","i","key","onClick","React","Component","Boolean","hostname","renderApp","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.057bef72.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TabList\":\"App_TabList__26jSg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tab\":\"Tab_Tab__xDpMS\"};","import axios from 'axios';\n\nconst clientId = '3680b1abca094e458e2a9f190f5607d1';\nconst redirectURI = `${window.location.protocol}//${window.location.host}`;\n\nclass SpotifyApiService {\n  constructor() {\n    const accessToken = this.getCurrentAccessToken();\n    if (accessToken) {\n      axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\n    } else {\n      this.getNewAccessToken();\n    }\n  }\n\n  getCurrentAccessToken() {\n    const hashFragment = document.location.hash.split('&').find((s) => s.match(/#?access_token=/));\n    const accessToken = hashFragment ? hashFragment.split('=')[1] : '';\n    return accessToken;\n  }\n\n  getNewAccessToken() {\n    let url = 'https://accounts.spotify.com/authorize';\n    url += '?response_type=token';\n    url += `&scope=${encodeURIComponent('user-top-read user-read-recently-played')}`;\n    url += `&client_id=${encodeURIComponent(clientId)}`;\n    url += `&redirect_uri=${encodeURIComponent(redirectURI)}`;\n\n    window.location = url;\n  }\n\n  topTracks(page) {\n    const pageSize = 25;\n    const baseApiUrl = 'https://api.spotify.com/v1/me/top/tracks';\n    return axios\n      .get(`${baseApiUrl}?limit=${pageSize}&offset=${page * pageSize}&time_range=short_term`)\n      .then(response => response.data.items)\n      .catch(this.getNewAccessToken);\n  }\n\n  recentTracks(page) {\n    // this endpoint will only ever return up to 50 tracks\n    return page === 0\n      ? axios\n        .get('https://api.spotify.com/v1/me/player/recently-played')\n        .then(response => response.data.items)\n        .then(items => items.map(item => item.track))\n        .catch(this.getNewAccessToken)\n      : new Promise(resolve => resolve([]));\n  }\n}\n\nexport default SpotifyApiService;\n","import React from 'react';\nimport classnames from 'classnames';\nimport classes from './Tab.module.css';\n\nconst Tab = ({ track }) => {\n  const title = track.name;\n  const artist = track.artists[0].name;\n  const imageURL = track.album.images[0].url;\n\n  const ultimateGuitarQuery = `${title} ${artist}`;\n  const ultimateGuitarUrl = `https://www.ultimate-guitar.com/search.php?search_type=title&value=${encodeURIComponent(ultimateGuitarQuery)}`;\n\n  const anchorClass = classnames([classes.Tab, 'relative max-w-sm rounded overflow-hidden shadow-lg m-4']);\n\n  return (\n    <a href={ultimateGuitarUrl} target=\"_bank\" className={anchorClass}>\n      <img alt=\"\" src={imageURL} className=\"w-full\" />\n      <div className=\"font-bold text-xl mb-2\">{title}</div>\n      <div className=\"font-light text-xl mb-2\">{artist}</div>\n    </a>\n  );\n};\n\nexport default Tab;\n","import React from 'react';\nimport classes from './App.module.css';\n\nimport SpotifyApiService from './SpotifyApiService';\n\nimport Tab from './Tab/Tab';\n\nconst SPOTIFY_RECENT = 'SPOTIFY_RECENT';\nconst SPOTIFY_TOP = 'SPOTIFY_TOP';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      mode: SPOTIFY_RECENT,\n      items: [],\n      page: 0,\n      dataExhausted: true\n    };\n  }\n\n  loadNextPage = () => {\n    // Test mode\n    if (this.props.state) {\n      return;\n    }\n    else {\n      if (!this.spotifyApiService) {\n        this.spotifyApiService = new SpotifyApiService();\n      }\n      const request = this.state.mode === SPOTIFY_TOP\n        ? this.spotifyApiService.topTracks(this.state.page)\n        : this.spotifyApiService.recentTracks(this.state.page)\n      request\n        .then(items => {\n          this.setState(state => \n            ({ \n              page: state.page + 1, \n              items: [...state.items, ...items],\n              dataExhausted: items.length === 0\n            })\n            )\n          }\n        )\n    }\n  }\n\n  componentDidMount() {\n    // Test mode\n    if (this.props.state) {\n      this.setState(this.props.state);\n    } else {\n      this.loadNextPage();\n    }\n  }\n\n  componentDidUpdate(oldProps, oldState) {\n    if (this.state.mode !== oldState.mode) {\n      this.loadNextPage();\n    }\n  }\n\n  changeMode = mode => {\n    this.setState({\n      mode,\n      items: [],\n      page: 0\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <select \n          value={this.state.mode} \n          onChange={e => this.changeMode(e.target.value)} \n          className=\"mt-8\"\n        >\n          <option value={SPOTIFY_RECENT}>Your recently listened to Spotify songs</option>\n          <option value={SPOTIFY_TOP}>Your most listened to Spotify songs</option>\n        </select>\n        <div className={classes.TabList}>\n          {this.state.items.map((track, i) => (<Tab key={i} track={track} />))}\n        </div>\n        <button\n          onClick={this.loadNextPage}\n          className={this.state.dataExhausted ? \"hidden\" : \"m-8\"}\n        >\n          Load more\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.renderApp = () =>\n    ReactDOM.render(<App state={window.data} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}